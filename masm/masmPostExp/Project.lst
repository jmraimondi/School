Microsoft (R) Macro Assembler Version 14.14.26430.0	    07/10/18 17:15:23

(calc.asm						     Page 1 - 1


				TITLE      (calc.asm)

				; This program calculates the area of any polygon
				; Last update:
				; John Michael Raimondi

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 0000000D			CR	EQU	0Dh
 = 0000000A			LF	EQU	0Ah
 = 0000001B			ESCAPE	EQU	1Bh
 = 00000020			SPC	EQU	20h
 = 0000002A			multOP	EQU	2Ah
 = 0000002B			addOP	EQU	2Bh
 = 0000002D			subOP	EQU	2Dh
 = 0000002F			divOP	EQU	2Fh

 00000000 00000000		fd	dword	?
 00000004 6F 75 74 70 75	ofilename	byte	"output.out", 0
	   74 2E 6F 75 74
	   00
 0000000F 69 6E 70 75 74	ifilename	byte	"input.in",0
	   2E 69 6E 00
 00000018 00000000		bytesRead	dword	?
 0000001C  00000050 [		inputData		byte	80	dup(SPC)
	    20
	   ]

 0000006C  00000050 [		stk			dword	80	dup(?)
	    00000000
	   ]
 000001AC  00						byte	?
 000001AD  00000050 [		outputdata	byte	80	dup(SPC)
	    20
	   ]

 00000000			.code
				;----------------------------------------------------------------
 00000000			betterAtoI	PROC
 00000000  BB 00000000			mov	ebx,0
 00000005  B8 00000000			mov	eax,0
 0000000A  BA 0000000A			mov	edx,10
 0000000F  8B 7C 24 04			mov	edi,[esp+4]	;start of number back to edi
 00000013			nextDigit:
 00000013  8A 1F			mov	bl,[edi]	;first char to bl
 00000015  F7 E2			mul	edx
 00000017  80 EB 30			sub	bl,30h
 0000001A  03 C3			add	eax,ebx
 0000001C  47				inc	edi
 0000001D  49				dec	ecx
 0000001E  83 F9 00			cmp	ecx,0
 00000021  74 02			je	done
 00000023  EB EE			jmp	nextDigit
 00000025			done:
 00000025  E8 0000005C			call	myPush ;push number onto stack
 0000002A  C3				ret ;edi ready at next char
 0000002B			betterAtoI	ENDP
				;----------------------------------------------------------------
 0000002B			betterItoA	PROC	;eax has #
 0000002B  BB 0000000A			mov	ebx,10
 00000030  B9 00000000			mov	ecx,0
 00000035  8B 7C 24 04			mov	edi,[esp+4] ;offset to store
 00000039			next:
 00000039  83 F8 00			cmp	eax,0
 0000003C  74 0F			je	done
 0000003E  BA 00000000			mov	edx,0
 00000043  F7 F3			div	ebx
 00000045  80 C2 30			add	dl,30h
 00000048  41				inc	ecx
 00000049  66| 52			push	dx	;esp - 2
 0000004B  EB EC			jmp	next
 0000004D			done:
 0000004D  83 F9 00			cmp	ecx,0
 00000050  74 08			je	realDone
 00000052  66| 5A			pop	dx
 00000054  88 17			mov	[edi],dl
 00000056  47				inc	edi
 00000057  49				dec	ecx
 00000058  EB F3			jmp	done
 0000005A			realDone:
 0000005A  C3				ret
 0000005B			betterItoA	ENDP
				;----------------------------------------------------------------
 0000005B			myWriteToFile	PROC
 0000005B			nextchar:
 0000005B  8A 02			mov	al,[edx]
 0000005D  3C 00			cmp	al,0
 0000005F  74 16			je	alldone
 00000061  A1 00000000 R		mov	eax,fd
 00000066  B9 00000001			mov	ecx,1
 0000006B  8B DA			mov	ebx,edx	;save edx
 0000006D  E8 00000000 E		call	WriteToFile
 00000072  8B D3			mov	edx,ebx	;restore edx
 00000074  42				inc	edx
 00000075  EB E4			jmp	nextchar
 00000077			alldone:
 00000077  C3				ret
 00000078			myWriteToFile	ENDP
				;----------------------------------------------------------------
 00000078			myPop	PROC
 00000078  3B 35 000001AC R		cmp	esi,stk + sizeof stk
 0000007E  74 05			je	outofhere
 00000080  8B 06			mov	eax,[esi]
 00000082  83 C6 04			add	esi,4
 00000085			outofhere:
 00000085  C3				ret
 00000086			myPop	ENDP
				;----------------------------------------------------------------
 00000086			myPush	PROC
 00000086  3B 35 0000006C R		cmp	esi,stk
 0000008C  74 05			je	full
 0000008E  83 C6 FC			add	esi,-4
 00000091  89 06			mov	[esi],eax
 00000093			full:
 00000093  C3				ret
 00000094			myPush	ENDP
				;----------------------------------------------------------------
 00000094			Parse	PROC
 00000094  B8 00000000			mov	eax,0
 00000099  BB 00000000			mov	ebx,0
 0000009E  8B 0D 00000018 R		mov	ecx,bytesRead
 000000A4  BA 00000000			mov	edx,0
 000000A9  BF 000001AD R		mov	edi,offset	outputData
 000000AE  57				push	edi
 000000AF  BF 0000001C R		mov	edi,offset	inputData
 000000B4			nextchar:
 000000B4  83 F9 00			cmp	ecx,0
 000000B7  0F 84 0000013A		je	alldone
 000000BD  8A 07			mov	al,[edi]
 000000BF  49				dec	ecx	;1 byte read
 000000C0  3C 20			cmp	al,SPC
 000000C2  74 68			je	skip
 000000C4  3C 0D			cmp	al,CR
 000000C6  74 64			je	skip
 000000C8  3C 0A			cmp	al,LF
 000000CA  74 6F			je	skip2
 000000CC  3C 2B			cmp	al,addOP
 000000CE  0F 84 00000096		je	opadd
 000000D4  3C 2D			cmp	al,subOP
 000000D6  0F 84 000000B0		je	opsub
 000000DC  3C 2F			cmp	al,divOP
 000000DE  0F 84 000000CA		je	opdiv
 000000E4  3C 2A			cmp	al,multOP
 000000E6  0F 84 000000E9		je	opmult
 000000EC  51				push	ecx	;save bytes left to read
 000000ED  57				push	edi ;save current spot in input
 000000EE  E8 00000122			call	StoreChar
 000000F3  5F				pop	edi	;input back to edi
 000000F4  57				push	edi	;start of number ptr back on stack
 000000F5  B9 00000001			mov	ecx,1
 000000FA			morenums:
 000000FA  8A 47 01			mov	al,[edi+1]	;check next
 000000FD  3C 30			cmp	al,'0'
 000000FF  7C 11			jl	notnum
 00000101  3C 39			cmp	al,'9'
 00000103  7F 0D			jg	notnum
 00000105  41				inc	ecx
 00000106  E8 0000010A			call	StoreChar
 0000010B  5F				pop	edi	;restore edi
 0000010C  57				push	edi	;push start of num back onto stack
 0000010D  03 F9			add	edi,ecx	;fix spot
 0000010F  4F				dec	edi	;fix -1
 00000110  EB E8			jmp	morenums
 00000112			notnum:
 00000112  8B 44 24 04			mov	eax,[esp+4]	;bytes read to eax
 00000116  8B D9			mov	ebx,ecx	;extra digits read to ebx
 00000118  83 C3 FF			add	ebx,-1
 0000011B  2B C3			sub	eax,ebx	;fix bytes read to include digits read
 0000011D  89 44 24 04			mov	[esp+4],eax ;back onto stack
 00000121  E8 FFFFFEDA			call	betterAtoI
 00000126  83 C4 04			add	esp,4	;remove start of num
 00000129  59				pop	ecx	;number of bytes back to ecx
 0000012A  EB 88			jmp	nextchar
 0000012C			skip:
 0000012C  51				push	ecx	;store ecx
 0000012D  57				push	edi	;store current ptr
 0000012E  E8 000000E2			call	storeChar
 00000133  5F				pop	edi	;restore current spot
 00000134  59				pop	ecx	;restore bytes left to read
 00000135  47				inc	edi	;next char
 00000136  E9 FFFFFF79			jmp	nextchar
 0000013B			skip2:
 0000013B  51				push	ecx
 0000013C  57				push	edi
 0000013D  E8 000000D3			call	storeChar
 00000142  5F				pop	edi
 00000143  59				pop	ecx
 00000144  5A				pop	edx	;output to edx
 00000145  51				push	ecx
 00000146  57				push	edi
 00000147  52				push	edx
 00000148  E8 FFFFFF2B			call	myPop	;answer to eax
 0000014D  E8 FFFFFED9			call	betterItoA
 00000152  83 C4 04			add	esp,4	;remove old output @
 00000155  5A				pop	edx	;current spot to edx
 00000156  59				pop	ecx	;bytes left to read to ecx
 00000157  B0 0D			mov	al,CR
 00000159  88 07			mov	[edi],al
 0000015B  47				inc	edi
 0000015C  B0 0A			mov	al,LF
 0000015E  88 07			mov	[edi],al
 00000160  47				inc	edi
 00000161  57				push	edi	;updated output position
 00000162  8B FA			mov	edi,edx ;current back to edi
 00000164  47				inc	edi	;next char
 00000165  E9 FFFFFF4A			jmp	nextchar
 0000016A			opadd:
 0000016A  51				push	ecx
 0000016B  57				push	edi
 0000016C  E8 000000A4			call	storeChar
 00000171  E8 FFFFFF02			call	myPop	;2nd val to eax
 00000176  8B D8			mov	ebx,eax	;2nd val to ebx
 00000178  E8 FFFFFEFB			call	myPop	;1st val to eax
 0000017D  03 C3			add	eax,ebx	;1st + 2nd
 0000017F  E8 FFFFFF02			call	myPush	;push answer onto my stack
 00000184  5F				pop	edi
 00000185  59				pop	ecx
 00000186  47				inc	edi	;next char
 00000187  E9 FFFFFF28			jmp	nextchar
 0000018C			opsub:
 0000018C  51				push	ecx
 0000018D  57				push	edi
 0000018E  E8 00000082			call	storeChar
 00000193  E8 FFFFFEE0			call	myPop	;2nd val to eax
 00000198  8B D8			mov	ebx,eax	;2nd to ebx
 0000019A  E8 FFFFFED9			call	myPop	;1st to eax
 0000019F  2B C3			sub	eax,ebx	;1st - 2nd
 000001A1  E8 FFFFFEE0			call	myPush	;answer to stack
 000001A6  5F				pop	edi
 000001A7  59				pop	ecx
 000001A8  47				inc	edi	;next
 000001A9  E9 FFFFFF06			jmp	nextchar
 000001AE			opdiv:
 000001AE  51				push	ecx
 000001AF  57				push	edi
 000001B0  E8 00000060			call	storeChar
 000001B5  E8 FFFFFEBE			call	myPop	;2nd to eax
 000001BA  8B D8			mov	ebx,eax	;to ebx
 000001BC  E8 FFFFFEB7			call	myPop	;1st to eax
 000001C1  BA 00000000			mov	edx,0	;prep div
 000001C6  F7 F3			div	ebx	;eax (1st) / ebx (2nd)
 000001C8  E8 FFFFFEB9			call	myPush
 000001CD  5F				pop	edi
 000001CE  59				pop	ecx
 000001CF  47				inc	edi
 000001D0  E9 FFFFFEDF			jmp	nextchar
 000001D5			opmult:
 000001D5  51				push	ecx
 000001D6  57				push	edi
 000001D7  E8 00000039			call	storeChar
 000001DC  E8 FFFFFE97			call	myPop
 000001E1  8B D8			mov	ebx,eax
 000001E3  E8 FFFFFE90			call	myPop
 000001E8  F7 E3			mul	ebx
 000001EA  E8 FFFFFE97			call	myPush
 000001EF  5F				pop	edi
 000001F0  59				pop	ecx
 000001F1  47				inc	edi
 000001F2  E9 FFFFFEBD			jmp	nextchar
 000001F7			alldone:
 000001F7  5F				pop	edi	;output to edi done with input
 000001F8  B0 0D			mov	al,CR
 000001FA  88 07			mov	[edi],al
 000001FC  47				inc	edi
 000001FD  B0 0A			mov	al,LF
 000001FF  88 07			mov	[edi],al
 00000201  47				inc	edi
 00000202  57				push	edi
 00000203  E8 FFFFFE70			call	myPop	;answer to eax
 00000208  E8 FFFFFE1E			call	betterItoA
 0000020D  B8 00000000			mov	eax,0
 00000212  89 07			mov	[edi],eax
 00000214  C3				ret
 00000215			Parse	ENDP
				;----------------------------------------------------------------
 00000215			storeChar	PROC
 00000215  8B 7C 24 0C			mov	edi,[esp+12] ;grab output @
 00000219  88 07			mov	[edi],al ;add character to output
 0000021B  47				inc	edi ;bump to next free output
 0000021C  89 7C 24 0C			mov	[esp+12],edi	;updated output to esp+4
 00000220  C3				ret
 00000221			storechar	ENDP
				;----------------------------------------------------------------
 00000221			main PROC
 00000221  BE 000001AC R		mov	esi,	offset	stk + sizeof stk
 00000226  B9 00000000			mov	ecx,0
 0000022B  B8 00000000			mov	eax,0
 00000230  BB 00000000			mov	ebx,0

 00000235  BA 0000000F R		mov	edx,offset	ifilename
 0000023A  E8 00000000 E		call	OpenInputFile
 0000023F  50				push	eax
 00000240  BA 0000001C R		mov	edx,offset	inputData
 00000245  B9 00000050			mov	ecx,80
 0000024A  E8 00000000 E		call	ReadFromFile
 0000024F  A3 00000018 R		mov	bytesRead,eax
 00000254  58				pop	eax
 00000255  E8 00000000 E		call	CloseFile
 0000025A  E8 FFFFFE35			call	Parse
					;work func
 0000025F  BA 00000004 R		mov	edx,offset	ofilename
 00000264  E8 00000000 E		call	CreateOutputFile
 00000269  A3 00000000 R		mov	fd,eax	;setup write after this
 0000026E  BA 000001AD R		mov	edx,offset	outputdata
 00000273  E8 FFFFFDE3			call	myWriteToFile
 00000278  A1 00000000 R		mov	eax,fd
 0000027D  E8 00000000 E		call	CloseFile
					exit
 00000282  6A 00	   *	    push   +000000000h
 00000284  E8 00000000 E   *	    call   ExitProcess
 00000289			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.14.26430.0	    07/10/18 17:15:23

(calc.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001FD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000289 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Parse  . . . . . . . . . . . . .	P Near	 00000094 _TEXT	Length= 00000181 Public STDCALL
  nextchar . . . . . . . . . . .	L Near	 000000B4 _TEXT	
  morenums . . . . . . . . . . .	L Near	 000000FA _TEXT	
  notnum . . . . . . . . . . . .	L Near	 00000112 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 0000012C _TEXT	
  skip2  . . . . . . . . . . . .	L Near	 0000013B _TEXT	
  opadd  . . . . . . . . . . . .	L Near	 0000016A _TEXT	
  opsub  . . . . . . . . . . . .	L Near	 0000018C _TEXT	
  opdiv  . . . . . . . . . . . .	L Near	 000001AE _TEXT	
  opmult . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  alldone  . . . . . . . . . . .	L Near	 000001F7 _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
betterAtoI . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002B Public STDCALL
  nextDigit  . . . . . . . . . .	L Near	 00000013 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000025 _TEXT	
betterItoA . . . . . . . . . . .	P Near	 0000002B _TEXT	Length= 00000030 Public STDCALL
  next . . . . . . . . . . . . .	L Near	 00000039 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000004D _TEXT	
  realDone . . . . . . . . . . .	L Near	 0000005A _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000221 _TEXT	Length= 00000068 Public STDCALL
myPop  . . . . . . . . . . . . .	P Near	 00000078 _TEXT	Length= 0000000E Public STDCALL
  outofhere  . . . . . . . . . .	L Near	 00000085 _TEXT	
myPush . . . . . . . . . . . . .	P Near	 00000086 _TEXT	Length= 0000000E Public STDCALL
  full . . . . . . . . . . . . .	L Near	 00000093 _TEXT	
myWriteToFile  . . . . . . . . .	P Near	 0000005B _TEXT	Length= 0000001D Public STDCALL
  nextchar . . . . . . . . . . .	L Near	 0000005B _TEXT	
  alldone  . . . . . . . . . . .	L Near	 00000077 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
storeChar  . . . . . . . . . . .	P Near	 00000215 _TEXT	Length= 0000000C Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
ESCAPE . . . . . . . . . . . . .	Number	 0000001Bh   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPC  . . . . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addOP  . . . . . . . . . . . . .	Number	 0000002Bh   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 00000018 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divOP  . . . . . . . . . . . . .	Number	 0000002Fh   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fd . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
ifilename  . . . . . . . . . . .	Byte	 0000000F _DATA	
inputData  . . . . . . . . . . .	Byte	 0000001C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
multOP . . . . . . . . . . . . .	Number	 0000002Ah   
ofilename  . . . . . . . . . . .	Byte	 00000004 _DATA	
outputdata . . . . . . . . . . .	Byte	 000001AD _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stk  . . . . . . . . . . . . . .	DWord	 0000006C _DATA	
subOP  . . . . . . . . . . . . .	Number	 0000002Dh   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
